{"version":3,"sources":["utilities.js","logo.svg","App.js","sorts/quicksort.js","sorts/mergesort.js","sorts/heapsort.js","sorts/insertionsort.js","sorts/selectionsort.js","sorts/bubblesort.js","reportWebVitals.js","index.js"],"names":["color1","color2","color3","color4","color5","copyArray","arr","Array","isArray","newArr","k","length","push","colorIndex","ind","color","colorRange","start","end","algorithmOptions","originalArray","workingArray","utils","frames","quicksort","midpoint","pval","pivot","j","val","partition","href","mergesort","Math","floor","kval","jval","heap_size","insertIntoHeap","pop_from_heap","ival","parent","c1val","child1","c2val","child2","pop","m","minval","min","run","swaps","AlgorithmSelect","props","currentAlgorithmName","currentAlgorithm","className","map","algorithmName","algorithm","algorithmDescription","classes","onClick","changeAlgorithm","runAlgorithm","Description","description","Display","canvas","this","canvasRef","current","ctx","getContext","frame","barWidth","barSpacing","xOffset","width","yOffset","fontSize","magnitudeMultiplier","clearRect","height","fillStyle","fillRect","font","fillText","text","currentLegend","legend","startY","startX","paintFrame","paintLegend","ref","React","Component","Controls","startingValues","startingArrayToCustomValues","startingArray","state","speedModifier","customValues","handleSpeedSliderChange","bind","handleCustomValuesChange","event","target","value","changeAnimationSpeed","pow","baseAnimationSpeed","setState","frameIndex","pause","changeFrame","substring","array","randomizedArray","slice","randInd","random","toString","maxFrameIndex","padStart","type","max","onChange","pauseAndChangeFrame","randomizeArray","changeStartingArray","FastRewind","SkipPrevious","isPaused","PlayArrow","Pause","SkipNext","FastForward","maxVal","minVal","maxLength","ValueCustomizer","handleCustomValuesSubmission","validCustomValueSubmission","match","parseInt","regex","values","preventDefault","validateCustomValues","customValuesToStartingArray","validCriteriaMessage","onSubmit","rows","cols","Visualizer","generateStartingArray","arrayLength","minimum","maximum","defaultAlgorithm","defaultAlgorithmRunner","animationSpeed","createRef","animationInterval","algorithmRunner","clearInterval","shouldPause","setInterval","speed","currentFrame","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","WebFont","load","google","families","active","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bb75f746.chunk.js","sourcesContent":["const color1 = \"#FF0000\";\r\nconst color2 = \"#008000\";\r\nconst color3 = \"#0000FF\";\r\nconst color4 = \"#8B4513\";\r\nconst color5 = \"#000000\";\r\nconst color6 = \"#FFFFFF\";\r\nconst color7 = \"#010101\";\r\nconst color8 = \"#800080\";\r\n\r\nexport function copyArray(arr){\r\n    if(!Array.isArray(arr)){\r\n        return arr;\r\n    } else {\r\n        let newArr = []\r\n        for(let k = 0; k < arr.length; k++){\r\n            newArr.push(copyArray(arr[k]));\r\n        }\r\n        return newArr;\r\n    }\r\n}\r\n\r\nexport function colorIndex(arr, ind, color){\r\n    arr[ind] = [arr[ind][0], color];\r\n}\r\n\r\nexport function colorRange(arr, start, end, color){\r\n    for(let k = start; k <= end; k++){\r\n        colorIndex(arr, k, color);\r\n    }\r\n}\r\n\r\nexport {color1, color2, color3, color4, color5, color6, color7, color8};","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport React from \"react\";\nimport { runHeapsort } from \"./sorts/heapsort.js\";\nimport { runQuicksort } from \"./sorts/quicksort.js\";\nimport { runMergesort } from \"./sorts/mergesort.js\";\nimport { runSelectionsort } from \"./sorts/selectionsort.js\";\nimport { runBubblesort } from \"./sorts/bubblesort.js\";\nimport { runInsertionsort } from \"./sorts/insertionsort.js\";\nimport * as utils from \"./utilities.js\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport {\n  FastForward,\n  FastRewind,\n  SkipPrevious,\n  SkipNext,\n  Pause,\n  PlayArrow,\n} from \"@material-ui/icons\";\n\nconst algorithmOptions = [\n  [\"Quicksort\", runQuicksort, \"Quicksort description\"],\n  [\"Mergesort\", runMergesort, \"Mergesort Description\"],\n  [\"Heapsort\", runHeapsort, \"Heapsort Description\"],\n  [\"Insertion sort\", runInsertionsort, \"Insertionsort Description\"],\n  [\"Selection sort\", runSelectionsort, \"Selectionsort Description\"],\n  [\"Bubble Sort\", runBubblesort, \"Bubblesort Description\"],\n];\n\nfunction AlgorithmSelect(props) {\n  let currentAlgorithmName, currentAlgorithmRunner, currentAlgorithmDescription;\n  [\n    currentAlgorithmName,\n    currentAlgorithmRunner,\n    currentAlgorithmDescription,\n  ] = props.currentAlgorithm;\n  return (\n    <div>\n      <div className=\"select-row\">\n        {props.algorithmOptions.map(\n          ([algorithmName, algorithm, algorithmDescription]) => {\n            let classes = \"btn btn-outline-dark algorithm-button \";\n            if (currentAlgorithmName == algorithmName) {\n              classes += \"active \";\n            }\n            return (\n              <button\n                key={algorithmName}\n                className={classes}\n                onClick={() => {\n                  props.changeAlgorithm([\n                    algorithmName,\n                    algorithm,\n                    algorithmDescription,\n                  ]);\n                  props.runAlgorithm();\n                }}\n              >\n                {algorithmName}\n              </button>\n            );\n          }\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction Description(props) {\n  return (\n    <div className=\"Description\">\n      <div className=\"description-block\">\n        Use this visualizer to compare different sorts. Each \"frame\" of the\n        visualization corresponds to a single swap between two elements. Try\n        customizing the values!\n      </div>\n      <br />\n      <div>{props.description}</div>\n    </div>\n  );\n}\n\nclass Display extends React.Component {\n  paintFrame() {\n    let canvas = this.props.canvasRef.current;\n    let ctx = canvas.getContext(\"2d\");\n    let frame = this.props.frame;\n\n    let barWidth = this.props.barWidth;\n    let barSpacing = this.props.barSpacing;\n    let xOffset =\n      (canvas.width - frame.length * (barWidth + barSpacing) - barSpacing) / 2;\n    let yOffset = this.props.yOffset;\n    let fontSize = this.props.fontSize;\n    let magnitudeMultiplier = this.props.magnitudeMultiplier;\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    for (let k = 0; k < frame.length; k++) {\n      let val, color;\n      [val, color] = frame[k];\n      ctx.fillStyle = color;\n      ctx.fillRect(\n        xOffset + (barWidth + barSpacing) * k,\n        canvas.height - yOffset,\n        barWidth,\n        -val * magnitudeMultiplier\n      );\n      ctx.font = fontSize + \"px Roboto Mono\";\n      ctx.fillText(\n        val,\n        xOffset + (barWidth + barSpacing) * k,\n        canvas.height - yOffset + fontSize\n      );\n    }\n  }\n\n  // Draw the legend on the canvas\n  paintLegend() {\n    let canvas = this.props.canvasRef.current;\n    let ctx = canvas.getContext(\"2d\");\n    let startX = 95;\n    let startY = 50;\n    let lineSpacing = 10;\n    let blockSize = 10;\n    let blockSpacing = 5;\n    let fontSize = 20;\n    let text, color;\n    let currentLegend = this.props.legend;\n    [text, color] = currentLegend[0];\n    ctx.font = fontSize + \"px Roboto Mono\";\n    ctx.fillStyle = color;\n    ctx.fillText(text, startX, startY + fontSize / 2);\n    for (let k = 1; k < currentLegend.length; k++) {\n      let text, color;\n      [text, color] = currentLegend[k];\n      ctx.fillStyle = color;\n      ctx.fillRect(\n        startX,\n        startY + (fontSize + lineSpacing) * k,\n        blockSize,\n        blockSize\n      );\n      ctx.font = fontSize + \"px Roboto Mono\";\n      ctx.fillText(\n        text,\n        startX + blockSize + blockSpacing,\n        startY + (fontSize + lineSpacing) * k + fontSize / 2\n      );\n    }\n  }\n\n  componentDidMount() {\n    this.paintFrame();\n    this.paintLegend();\n  }\n\n  render() {\n    let frame = this.props.frame;\n    if (this.props.canvasRef.current) {\n      this.paintFrame();\n      this.paintLegend();\n    }\n    return (\n      <div>\n        <canvas\n          width={this.props.width}\n          height={this.props.height}\n          ref={this.props.canvasRef}\n        />\n      </div>\n    );\n  }\n}\n\nclass Controls extends React.Component {\n  constructor(props) {\n    super(props);\n    let startingValues = this.startingArrayToCustomValues(\n      this.props.startingArray\n    );\n    this.state = {\n      speedModifier: 0,\n      customValues: startingValues,\n    };\n    this.handleSpeedSliderChange = this.handleSpeedSliderChange.bind(this);\n    this.handleCustomValuesChange = this.handleCustomValuesChange.bind(this);\n  }\n\n  handleSpeedSliderChange(event) {\n    let speedModifier = event.target.value;\n    this.props.changeAnimationSpeed(\n      Math.pow(4, -(speedModifier / 10)) * this.props.baseAnimationSpeed\n    );\n    this.setState({ speedModifier: speedModifier });\n  }\n  pauseAndChangeFrame(frameIndex) {\n    this.props.pause(true);\n    this.props.changeFrame(frameIndex);\n  }\n\n  startingArrayToCustomValues(arr) {\n    let customValues = \"\";\n    for (let k = 0; k < arr.length; k++) {\n      customValues += arr[k][0] + \", \";\n    }\n    if (customValues) {\n      customValues = customValues.substring(0, customValues.length - 2);\n    }\n    return customValues;\n  }\n\n  handleCustomValuesChange(event) {\n    let customValues = event.target.value;\n    this.setState({ customValues: customValues });\n  }\n\n  randomizeArray(array) {\n    let randomizedArray = array.slice();\n    for (let k = 0; k < randomizedArray.length; k++) {\n      let randInd = Math.floor(\n        Math.random() * (randomizedArray.length - k) + k\n      );\n      [randomizedArray[k], randomizedArray[randInd]] = [\n        randomizedArray[randInd],\n        randomizedArray[k],\n      ];\n    }\n    return randomizedArray;\n  }\n\n  render() {\n    let frameIndex = (this.props.frameIndex + 1).toString();\n    let maxFrameIndex = (this.props.maxFrameIndex + 1).toString();\n    frameIndex = frameIndex.padStart(maxFrameIndex.length, \" \");\n    return (\n      <div>\n        <div>\n          <div>\n            <div className=\"frame-controls\">\n              <div>\n                <span className=\"frame-slider-label\">\n                  {\"Frame: \" + frameIndex + \"/\" + maxFrameIndex}\n                </span>\n              </div>\n              <input\n                className=\"frame-slider\"\n                type=\"range\"\n                min={0}\n                max={this.props.maxFrameIndex}\n                value={this.props.frameIndex}\n                onChange={(event) =>\n                  this.pauseAndChangeFrame(event.target.value)\n                }\n              />\n            </div>\n          </div>\n          <div className=\"playback-bar\">\n            <button\n              className=\"btn btn-outline-dark\"\n              onClick={() => {\n                let randomizedArray = this.randomizeArray(\n                  this.props.startingArray\n                );\n                this.props.changeStartingArray(randomizedArray);\n                this.setState({\n                  customValues: this.startingArrayToCustomValues(\n                    randomizedArray\n                  ),\n                });\n              }}\n            >\n              Randomize Order\n            </button>\n            <div className=\"step-controls\">\n              <button\n                className=\"btn btn-outline-dark\"\n                onClick={(event) => this.pauseAndChangeFrame(0)}\n              >\n                <FastRewind />\n              </button>\n              <button\n                className=\"btn btn-outline-dark\"\n                onClick={(event) =>\n                  this.pauseAndChangeFrame(this.props.frameIndex - 1)\n                }\n              >\n                <SkipPrevious />\n              </button>\n              <button\n                className=\"btn btn-outline-dark\"\n                onClick={(event) => this.props.pause(!this.props.isPaused)}\n              >\n                {this.props.isPaused ? <PlayArrow /> : <Pause />}\n              </button>\n              <button\n                className=\"btn btn-outline-dark\"\n                onClick={(event) =>\n                  this.pauseAndChangeFrame(this.props.frameIndex + 1)\n                }\n              >\n                <SkipNext />\n              </button>\n              <button\n                className=\"btn btn-outline-dark\"\n                onClick={(event) =>\n                  this.pauseAndChangeFrame(this.props.maxFrameIndex)\n                }\n              >\n                <FastForward />\n              </button>\n            </div>\n            <form>\n              <label className=\"speed\">\n                <span className=\"speed-label\">Speed:</span>\n                <input\n                  className=\"speed-slider\"\n                  type=\"range\"\n                  min={-10}\n                  max={10}\n                  value={this.state.speedModifier}\n                  onChange={this.handleSpeedSliderChange}\n                />\n              </label>\n            </form>\n          </div>\n        </div>\n        <ValueCustomizer\n          customValues={this.state.customValues}\n          handleCustomValuesChange={this.handleCustomValuesChange}\n          changeStartingArray={this.props.changeStartingArray}\n          maxVal={this.props.maxVal}\n          minVal={this.props.minVal}\n          maxLength={this.props.maxLength}\n        />\n      </div>\n    );\n  }\n}\n\nclass ValueCustomizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleCustomValuesSubmission = this.handleCustomValuesSubmission.bind(\n      this\n    );\n\n    this.state = {\n      validCustomValueSubmission: true,\n    };\n  }\n\n  customValuesToStartingArray(customValues) {\n    if (!customValues) {\n      return [];\n    }\n    const regex = /[0-9]+/g;\n    return customValues\n      .match(regex)\n      .map((value) => [parseInt(value), utils.color5]);\n  }\n\n  validateCustomValues(customValues) {\n    let regex = /^(\\s*[0-9]+\\s*,)*(\\s*[0-9]+\\s*)?$/g;\n    if (customValues.match(regex) == null) {\n      return false;\n    }\n    regex = /[0-9]+/g;\n    let values = customValues.match(regex).map((value) => parseInt(value));\n    if (\n      Math.max(...values) > 100 ||\n      Math.min(...values) < 0 ||\n      values.length >= this.props.maxLength\n    ) {\n      return false;\n    }\n    return true;\n  }\n\n  handleCustomValuesSubmission(event) {\n    let customValues = this.props.customValues;\n    event.preventDefault();\n    if (this.validateCustomValues(customValues)) {\n      this.props.changeStartingArray(\n        this.customValuesToStartingArray(customValues)\n      );\n      this.setState({ validCustomValueSubmission: true });\n    } else {\n      this.setState({ validCustomValueSubmission: false });\n    }\n  }\n\n  render() {\n    let validCriteriaMessage = (\n      <span\n        className={\n          this.state.validCustomValueSubmission\n            ? \"\"\n            : \"invalid-custom-value-submission\"\n        }\n      >\n        {\"Custom values must be integers greater than or equal to \" +\n          this.props.minVal +\n          \" and less than \" +\n          this.props.maxVal +\n          \".\"}\n        <br />\n        {\"Separate values using commas. Maximum length of \" +\n          this.props.maxLength +\n          \" values.\"}\n      </span>\n    );\n    return (\n      <div>\n        <form onSubmit={this.handleCustomValuesSubmission}>\n          <label className=\"custom-value-submission-label\">\n            <textarea\n              rows=\"2\"\n              cols=\"100\"\n              onChange={this.props.handleCustomValuesChange}\n              value={this.props.customValues}\n            />\n            <input\n              className=\"btn btn-outline-dark\"\n              type=\"submit\"\n              value=\"Customize Values\"\n            />\n          </label>\n        </form>\n        <div>{validCriteriaMessage}</div>\n      </div>\n    );\n  }\n}\n\nclass Visualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    let startingArray = this.generateStartingArray(\n      this.props.arrayLength,\n      this.props.minimum,\n      this.props.maximum\n    );\n    let defaultAlgorithmName, defaultAlgorithmRunner;\n    [\n      defaultAlgorithmName,\n      defaultAlgorithmRunner,\n    ] = this.props.defaultAlgorithm;\n    let frames, legend, description;\n    [frames, legend, description] = defaultAlgorithmRunner(startingArray);\n    this.state = {\n      startingArray: startingArray,\n      isPaused: true,\n      frames: frames,\n      legend: legend,\n      frameIndex: 0,\n      animationSpeed: this.props.baseAnimationSpeed,\n      currentAlgorithm: this.props.defaultAlgorithm,\n      description: description,\n    };\n    this.canvasRef = React.createRef();\n    this.animationInterval = null;\n    this.runAlgorithm = this.runAlgorithm.bind(this);\n    this.pause = this.pause.bind(this);\n    this.changeFrame = this.changeFrame.bind(this);\n    this.changeAnimationSpeed = this.changeAnimationSpeed.bind(this);\n    this.changeAlgorithm = this.changeAlgorithm.bind(this);\n    this.changeStartingArray = this.changeStartingArray.bind(this);\n  }\n  generateStartingArray(arrayLength, minimum, maximum) {\n    let startingArray = [];\n    for (let k = 0; k < arrayLength; k++) {\n      let value = Math.floor(Math.random() * (maximum + 1)) + minimum;\n      startingArray.push([value, utils.color5]);\n    }\n    return startingArray;\n  }\n\n  runAlgorithm() {\n    this.setState((state) => {\n      let algorithmName, algorithmRunner;\n      [algorithmName, algorithmRunner] = state.currentAlgorithm;\n      let frames, legend, description;\n      [frames, legend, description] = algorithmRunner(state.startingArray);\n      clearInterval(this.animationInterval);\n      return {\n        legend: legend,\n        frames: frames,\n        description: description,\n        frameIndex: 0,\n        isPaused: true,\n      };\n    });\n  }\n\n  changeAlgorithm(currentAlgorithm) {\n    this.setState({ currentAlgorithm: currentAlgorithm });\n  }\n\n  pause(shouldPause) {\n    let isPaused = this.state.isPaused;\n    if (shouldPause == isPaused) {\n      return;\n    }\n    clearInterval(this.animationInterval);    \n    if (!shouldPause) {\n      this.animationInterval = setInterval(\n        () => this.changeFrame(this.state.frameIndex + 1),\n        this.state.animationSpeed\n      );\n    }\n    this.setState({ isPaused: shouldPause });\n  }\n\n  changeFrame(frameIndex) {\n    frameIndex = Math.max(\n      0,\n      Math.min(this.state.frames.length - 1, frameIndex)\n    );\n    this.setState({ frameIndex: frameIndex });\n  }\n\n  changeAnimationSpeed(speed) {\n    if (!this.state.isPaused) {\n      clearInterval(this.animationInterval);\n      this.animationInterval = setInterval(\n        () => this.changeFrame(this.state.frameIndex + 1),\n        speed\n      );\n    }\n    this.setState({ animationSpeed: speed });\n  }\n\n  changeStartingArray(startingArray) {\n    this.setState({ startingArray: startingArray });\n    this.runAlgorithm();\n  }\n\n  render() {\n    let currentFrame = this.state.frames[this.state.frameIndex];\n    return (\n      <div>\n        <AlgorithmSelect\n          currentAlgorithm={this.state.currentAlgorithm}\n          algorithmOptions={this.props.algorithmOptions}\n          runAlgorithm={this.runAlgorithm}\n          changeAlgorithm={this.changeAlgorithm}\n        />\n        <Description description={this.state.description} />\n        <Display\n          canvasRef={this.canvasRef}\n          width={1200}\n          height={480}\n          frame={currentFrame}\n          legend={this.state.legend}\n          barWidth={10}\n          barSpacing={12}\n          yOffset={50}\n          fontSize={12}\n          magnitudeMultiplier={2}\n        />\n        <Controls\n          frame={this.state.frameIndex}\n          pause={this.pause}\n          isPaused={this.state.isPaused}\n          maxFrameIndex={this.state.frames.length - 1}\n          frameIndex={this.state.frameIndex}\n          changeFrame={this.changeFrame}\n          baseAnimationSpeed={this.props.baseAnimationSpeed}\n          changeAnimationSpeed={this.changeAnimationSpeed}\n          startingArray={this.state.startingArray}\n          changeStartingArray={this.changeStartingArray}\n          maxVal={this.props.maximum}\n          minVal={this.props.minimum}\n          maxLength={this.props.maxLength}\n        />\n      </div>\n    );\n  }\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <span>\n        <b>Sort Visualizer</b>\n      </span>\n      <Visualizer\n        arrayLength={40}\n        minimum={0}\n        maximum={100}\n        maxLength={50}\n        baseAnimationSpeed={100}\n        algorithmOptions={algorithmOptions}\n        defaultAlgorithm={algorithmOptions[0]}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import * as utils from \"../utilities.js\";\r\n\r\nexport function runQuicksort(originalArray) {\r\n    var workingArray = utils.copyArray(originalArray);\r\n    var frames = [utils.copyArray(originalArray)];\r\n    function quicksort(start, end) {\r\n        if (start >= end) {\r\n            return;\r\n        }\r\n        var midpoint = partition(start, end);\r\n        quicksort(start, midpoint - 1);\r\n        quicksort(midpoint + 1, end);\r\n    }\r\n\r\n    function partition(start, end) {\r\n        var pivot = end;\r\n        var pval, pr, pg, pb;\r\n        [pval, pr, pg, pb] = workingArray[pivot];\r\n        utils.colorRange(workingArray, start, end, utils.color4);\r\n        frames.push(utils.copyArray(workingArray));\r\n        utils.colorIndex(workingArray, pivot, utils.color2);\r\n        frames.push(utils.copyArray(workingArray));\r\n        var j = start;\r\n        for (var k = start; k < end; k++) {\r\n            var val, r, g, b;\r\n            [val, r, g, b] = workingArray[k];\r\n            if (val < pval) {\r\n                [workingArray[j], workingArray[k]] = [\r\n                    workingArray[k],\r\n                    workingArray[j],\r\n                ];\r\n                j += 1;\r\n            }\r\n            utils.colorRange(workingArray, start, j - 1, utils.color3);\r\n            utils.colorRange(workingArray, j, k, utils.color1);\r\n            frames.push(utils.copyArray(workingArray));\r\n        }\r\n        [workingArray[j], workingArray[pivot]] = [\r\n            workingArray[pivot],\r\n            workingArray[j],\r\n        ];\r\n        frames.push(utils.copyArray(workingArray));\r\n        utils.colorRange(workingArray, start, end, utils.color5);\r\n        return j;\r\n    }\r\n    quicksort(0, workingArray.length - 1);\r\n    frames.push(workingArray);\r\n    var legend = [\r\n        [\"Quicksort Legend\", utils.color5],\r\n        [\"Remaining elements in partition\", utils.color4],\r\n        [\"Pivot\", utils.color2],\r\n        [\"Elements in partition less than pivot\", utils.color3],\r\n        [\"Elements in partition greater than or equal to pivot\", utils.color1],\r\n    ];\r\n    var description = (\r\n        <span>\r\n            <b>Quicksort</b> is an efficient in-place sorting algorithm with an average\r\n            runtime of O(n log n). <br /><a href=\"https://en.wikipedia.org/wiki/Quicksort\">Learn about how Quicksort works on Wikipedia.</a>\r\n        </span>\r\n    );\r\n    return [frames, legend, description];\r\n}\r\n","import * as utils from '../utilities.js';\r\n\r\nexport function runMergesort(originalArray){\r\n    var workingArray = utils.copyArray(originalArray);\r\n    var frames = [utils.copyArray(workingArray)];\r\n    function mergesort(start, end){\r\n        if (start == end){\r\n            return workingArray[start]\r\n        } else {\r\n            var midpoint = Math.floor((start + end) / 2);\r\n            mergesort(start, midpoint);\r\n            mergesort(midpoint + 1, end);\r\n            utils.colorRange(workingArray, start, midpoint, utils.color1);\r\n            utils.colorRange(workingArray, midpoint + 1, end, utils.color3);\r\n            frames.push(utils.copyArray(workingArray));\r\n            var arr = [];\r\n            var k = start;\r\n            var j = midpoint + 1;\r\n            while (k <= midpoint && j <= end){\r\n                var kval, kr, kg, kb;\r\n                [kval, kr, kg, kb] = workingArray[k];\r\n                var jval, jr, jg, jb;\r\n                [jval, jr, jg, jb] = workingArray[j];\r\n                if(kval <= jval){\r\n                    arr.push(workingArray[k]);\r\n                    k += 1;                    \r\n                } else {\r\n                    arr.push(workingArray[j]); \r\n                    j += 1;                                       \r\n                }\r\n            }\r\n            while (k <= midpoint){\r\n                arr.push(workingArray[k]);\r\n                k += 1;\r\n            }\r\n            while (j <= end){\r\n                arr.push(workingArray[j]);\r\n                j += 1;\r\n            }\r\n            var j = 0;\r\n            for (var k = start; k <= end; k++){\r\n                workingArray[k] = arr[j];\r\n                utils.colorIndex(workingArray, k, utils.color2);\r\n                frames.push(utils.copyArray(workingArray));\r\n                j += 1;\r\n            }\r\n            utils.colorRange(workingArray, start, end, utils.color5);\r\n            frames.push(utils.copyArray(workingArray));\r\n        }\r\n    }\r\n    mergesort(0, workingArray.length - 1);\r\n    var description = (\r\n        <span>\r\n            <b>Mergesort</b> is an efficient stable sorting algorithm with a\r\n            runtime of O(n log n) and a memory requirement of O(n). \r\n            <br /><a href=\"https://en.wikipedia.org/wiki/Merge_sort\">Learn about how Mergesort works on Wikipedia.</a>\r\n        </span>\r\n    );    \r\n    var legend = [[\"Mergesort Legend\", utils.color5], [\"Left in-order partition\", utils.color1], [\"Right in-order partition\", utils.color3], [\"Merged in-order partition\", utils.color2]];\r\n    return [frames, legend, description];\r\n}","import * as utils from '../utilities.js';\r\n\r\nexport function runHeapsort(originalArray){\r\n    var workingArray = utils.copyArray(originalArray);\r\n    var frames = [utils.copyArray(originalArray)];\r\n    var heap_size = 0;\r\n    for(var k = 0; k < originalArray.length; k++){\r\n        insertIntoHeap();\r\n        frames.push(utils.copyArray(workingArray));\r\n    }\r\n    for(var k = workingArray.length - 1; k >= 0; k--){\r\n        pop_from_heap();\r\n    }\r\n\r\n    function insertIntoHeap(){\r\n        var ind = heap_size;\r\n        utils.colorIndex(workingArray, ind, utils.color1);\r\n        frames.push(utils.copyArray(workingArray));            \r\n        utils.colorIndex(workingArray, ind, utils.color3);        \r\n        var ival, ir, ig, ib;\r\n        [ival, ir, ig, ib] = workingArray[ind];\r\n        var parent = Math.floor((ind - 1) / 2);\r\n        var pval, pr, pg, pb;\r\n        if(parent > -1){\r\n            [pval, pr, pg, pb] = workingArray[parent];\r\n        }\r\n        while(parent > 0 && ival > pval){\r\n            utils.colorIndex(workingArray, ind, utils.color1);\r\n            frames.push(utils.copyArray(workingArray));            \r\n            utils.colorIndex(workingArray, ind, utils.color3);\r\n            [workingArray[ind], workingArray[parent]] = [workingArray[parent], workingArray[ind]];\r\n            ind = parent;\r\n            parent = Math.floor((ind - 1) / 2);\r\n            [pval, pr, pg, pb] = workingArray[parent];\r\n            [ival, ir, ig, ib] = workingArray[ind];\r\n        }\r\n        if (ival > pval){\r\n            [workingArray[ind], workingArray[parent]] = [workingArray[parent], workingArray[ind]];            \r\n        }\r\n        heap_size += 1;\r\n    }\r\n\r\n    function pop_from_heap(){\r\n        [workingArray[0], workingArray[heap_size - 1]] = [workingArray[heap_size - 1], workingArray[0]];\r\n        utils.colorIndex(workingArray, heap_size - 1, utils.color2);\r\n        utils.colorIndex(workingArray, 0, utils.color1);        \r\n        frames.push(utils.copyArray(workingArray));\r\n        heap_size -= 1;\r\n        var ind = 0;\r\n        var ival, ir, ig, ib;\r\n        [ival, ir, ig, ib] = workingArray[ind];\r\n        var child1 = ind * 2 + 1;\r\n        var c1val, c1r, c1g, c1b;\r\n        if (child1 < heap_size){\r\n            [c1val, c1r, c1g, c1b] = workingArray[child1];\r\n        }\r\n        var child2 = ind * 2 + 2;\r\n        var c2val, c2r, c2g, c2b;\r\n        if (child2 < heap_size){\r\n            [c2val, c2r, c2g, c2b] = workingArray[child2];\r\n        }\r\n        while(child1 < heap_size && child2 < heap_size  && (ival < c1val || ival < c2val)){\r\n            if (c1val > c2val){\r\n                [workingArray[child1], workingArray[ind]] = [workingArray[ind], workingArray[child1]];\r\n                ind = child1;\r\n            } else {\r\n                [workingArray[child2], workingArray[ind]] = [workingArray[ind], workingArray[child2]];                \r\n                ind = child2;\r\n            }\r\n            frames.push(utils.copyArray(workingArray)); \r\n            child1 = ind * 2 + 1;\r\n            if (child1 < heap_size){\r\n                [c1val, c1r, c1g, c1b] = workingArray[child1];\r\n            }            \r\n            child2 = ind * 2 + 2;\r\n            if (child2 < heap_size){\r\n                [c2val, c2r, c2g, c2b] = workingArray[child2];\r\n            }\r\n        }\r\n        if (child2 < heap_size && ival < c2val){\r\n            [workingArray[child2], workingArray[ind]] = [workingArray[ind], workingArray[child2]];                \r\n        } else if(child1 < heap_size && ival < c1val){\r\n            [workingArray[child1], workingArray[ind]] = [workingArray[ind], workingArray[child1]];            \r\n        }\r\n        utils.colorIndex(workingArray, ind, utils.color3);        \r\n        frames.push(utils.copyArray(workingArray));\r\n    }\r\n    utils.colorRange(workingArray, 0, workingArray.length - 1, utils.color5);\r\n    frames.push(utils.copyArray(workingArray));\r\n    var description = (\r\n        <span>\r\n            <b>Heapsort</b> is an efficient in-place sorting algorithm with a\r\n            runtime of O(n log n). \r\n            <br /><a href=\"https://en.wikipedia.org/wiki/Heapsort\">Learn about how Heapsort works on Wikipedia.</a>\r\n        </span>\r\n    );        \r\n    var legend = [[\"Heapsort Legend\", utils.color5], [\"In-place max heap\", utils.color3], [\"Element being sifted\", utils.color1], [\"Sorted elements\", utils.color2]]\r\n    return [frames, legend, description];\r\n}","import * as utils from \"../utilities.js\";\r\n\r\nexport function runInsertionsort(originalArray) {\r\n    var workingArray = utils.copyArray(originalArray);\r\n    var frames = [utils.copyArray(workingArray)];\r\n    for (var k = 0; k < workingArray.length; k++) {\r\n        utils.colorIndex(workingArray, k, utils.color1);\r\n        var kval, kr, kg, kb;\r\n        [kval, kr, kg, jb] = workingArray[k];\r\n        var jval, jr, jg, jb;\r\n        for (var j = 0; j < k; j++) {\r\n            [jval, jr, jg, jb] = workingArray[j];\r\n            utils.colorRange(workingArray, 0, j, utils.color3);\r\n            frames.push(utils.copyArray(workingArray));\r\n            if (kval < jval) {\r\n                frames.pop();\r\n                utils.colorIndex(workingArray, j, utils.color2);\r\n                for (var m = k; m > j; m--) {\r\n                    [workingArray[m], workingArray[m - 1]] = [\r\n                        workingArray[m - 1],\r\n                        workingArray[m],\r\n                    ];\r\n                    frames.push(utils.copyArray(workingArray));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        utils.colorRange(workingArray, 0, k, utils.color2);\r\n        frames.push(utils.copyArray(workingArray));\r\n    }\r\n    utils.colorRange(workingArray, 0, workingArray.length - 1, utils.color5);\r\n    frames.push(utils.copyArray(workingArray));\r\n    var legend = [\r\n        [\"Insertion Sort Legend\", utils.color5],\r\n        [\"Target element\", utils.color1],\r\n        [\"Items less than or equal to target element\", utils.color3],\r\n        [\"Sorted elements\", utils.color2],\r\n    ];\r\n    var description = (\r\n        <span>\r\n            <b>Insertion sort</b> is an inefficient sorting algorithm with an\r\n            runtime of O(n^2). <br />\r\n            <a href=\"https://en.wikipedia.org/wiki/Insertion_sort\">\r\n                Learn about how Insertion sort works on Wikipedia.\r\n            </a>\r\n        </span>\r\n    );\r\n    return [frames, legend, description];\r\n}\r\n","import * as utils from \"../utilities.js\";\r\n\r\nexport function runSelectionsort(originalArray) {\r\n    var workingArray = utils.copyArray(originalArray);\r\n    var frames = [utils.copyArray(workingArray)];\r\n    for (var k = 0; k < workingArray.length; k++) {\r\n        var min = k;\r\n        var minval, mr, mg, mb;\r\n        [minval, mr, mg, mb] = workingArray[min];\r\n        utils.colorIndex(workingArray, min, utils.color1);\r\n        for (var j = k + 1; j < workingArray.length; j++) {\r\n            var jval, jr, jg, jb;\r\n            [jval, jr, jg, jb] = workingArray[j];\r\n            if (jval < minval) {\r\n                utils.colorIndex(workingArray, min, utils.color5);\r\n                min = j;\r\n                [minval, mr, mg, mb] = workingArray[min];\r\n            }\r\n            utils.colorIndex(workingArray, j, utils.color3);\r\n            utils.colorIndex(workingArray, min, utils.color1);\r\n            frames.push(utils.copyArray(workingArray));\r\n            utils.colorIndex(workingArray, j, utils.color5);\r\n            utils.colorIndex(workingArray, min, utils.color1);\r\n        }\r\n        [workingArray[min], workingArray[k]] = [\r\n            workingArray[k],\r\n            workingArray[min],\r\n        ];\r\n        utils.colorIndex(workingArray, k, utils.color2);\r\n    }\r\n    utils.colorRange(workingArray, 0, workingArray.length - 1, utils.color5);\r\n    frames.push(utils.copyArray(workingArray));\r\n    var legend = [\r\n        [\"Selection Sort Legend\", utils.color5],\r\n        [\"Current element\", utils.color3],\r\n        [\"Current minimum among unsorted elements\", utils.color1],\r\n        [\"Sorted elements\", utils.color2],\r\n    ];\r\n    var description = (\r\n        <span>\r\n            <b>Selection sort</b> is an inefficient sorting algorithm with an\r\n            runtime of O(n^2). <br />\r\n            <a href=\"https://en.wikipedia.org/wiki/Selection_sort\">\r\n                Learn about how Selection sort works on Wikipedia.\r\n            </a>\r\n        </span>\r\n    );\r\n    return [frames, legend, description];\r\n}\r\n","import * as utils from \"../utilities.js\";\r\n\r\nexport function runBubblesort(originalArray) {\r\n    var workingArray = utils.copyArray(originalArray);\r\n    var frames = [utils.copyArray(workingArray)];\r\n    var run = true;\r\n    while (run) {\r\n        var swaps = 0;\r\n        for (var k = 1; k < workingArray.length; k++) {\r\n            var kval, kr, kg, kb;\r\n            [kval, kr, kg, kb] = workingArray[k];\r\n            var pval, pr, pg, pb;\r\n            [pval, pr, pg, pb] = workingArray[k - 1];\r\n            utils.colorIndex(workingArray, k, utils.color1);\r\n            utils.colorIndex(workingArray, k - 1, utils.color3);\r\n            frames.push(utils.copyArray(workingArray));\r\n            if (kval < pval) {\r\n                [workingArray[k], workingArray[k - 1]] = [\r\n                    workingArray[k - 1],\r\n                    workingArray[k],\r\n                ];\r\n                utils.colorIndex(workingArray, k, utils.color3);\r\n                utils.colorIndex(workingArray, k - 1, utils.color1);\r\n                frames.push(utils.copyArray(workingArray));\r\n                swaps += 1;\r\n            }\r\n            utils.colorIndex(workingArray, k, utils.color5);\r\n            utils.colorIndex(workingArray, k - 1, utils.color5);\r\n        }\r\n        if (swaps == 0) {\r\n            run = false;\r\n        }\r\n    }\r\n    utils.colorRange(workingArray, 0, workingArray.length - 1, utils.color5);\r\n    frames.push(utils.copyArray(workingArray));\r\n    var legend = [\r\n        [\"Bubblesort Legend\", utils.color5],\r\n        [\"Left element\", utils.color3],\r\n        [\"Right element\", utils.color1],\r\n    ];\r\n    var description = (\r\n        <span>\r\n            <b>Bubble sort</b> is an inefficient sorting algorithm with an\r\n            runtime of O(n^2). <br />\r\n            <a href=\"https://en.wikipedia.org/wiki/Bubble_sort\">\r\n                Learn about how Bubble sort works on Wikipedia.\r\n            </a>\r\n        </span>\r\n    );\r\n    return [frames, legend, description];\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport WebFont from \"webfontloader\";\n\nlet init = () =>\n  ReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n  );\n  \nWebFont.load({\n  google: { families: [\"Roboto Mono\"] },\n  active: init,\n});\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}